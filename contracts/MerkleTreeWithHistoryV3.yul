object "MerkleTreeWithHistoryV3" {
    code {
        setLevels(20)
        setFilledSubtrees(0, 0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c)
        setFilledSubtrees(1, 0x256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d)
        setFilledSubtrees(2, 0x1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200)
        setFilledSubtrees(3, 0x20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb)
        setFilledSubtrees(4, 0x0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9)
        setFilledSubtrees(5, 0x24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959)
        setFilledSubtrees(6, 0x1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c)
        setFilledSubtrees(7, 0x19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4)
        setFilledSubtrees(8, 0x261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80)
        setFilledSubtrees(9, 0x0058459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007)
        setFilledSubtrees(10, 0x1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30)
        setFilledSubtrees(11, 0x1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5)
        setFilledSubtrees(12, 0x0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f)
        setFilledSubtrees(13, 0x1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd)
        setFilledSubtrees(14, 0x133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108)
        setFilledSubtrees(15, 0x13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6)
        setFilledSubtrees(16, 0x1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854)
        setFilledSubtrees(17, 0x0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea)
        setFilledSubtrees(18, 0x24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d)
        setFilledSubtrees(19, 0x198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05)
        setRoots(0, 0x198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05)

        datacopy(0, dataoffset("runtime"), datasize("runtime"))
        return(0, datasize("runtime"))

        function setLevels(_levels) {
            sstore(levelsPos(), _levels)
        }

        function setFilledSubtrees(i, _filledSubtree) {
            sstore(filledSubtreesOffset(i), _filledSubtree)
        }

        function setRoots(i, _root) {
            sstore(rootsOffset(i), _root)
        }

        function levelsPos() -> p {
            /* keccak256("MerkleTreeWithHistory.levels") */
            p := 0xde2ed6c39cf86ec6c46094edf836392df5606753f0bad38f3944f0d7d7378cdc
        }

        function filledSubtreesOffset(i) -> offset {
            /* keccak256(keccak256("MerkleTreeWithHistory.filledSubtrees"), i) */
            mstore(0, 0xb0c88fae7c37e544fed707550a8667cd25ee99af1d5b4f590257644dc2edfd14)
            mstore(0x20, i)
            offset := keccak256(0, 0x40)
        }

        function rootsOffset(i) -> offset {
            /* keccak256(keccak256("MerkleTreeWithHistory.roots"), i) */
            mstore(0, 0x3824de49a43784238a1838eb1c9b2f1411a38b93366828f2f9a6c422377ef870)
            mstore(0x20, i)
            offset := keccak256(0, 0x40)
        }
    }
    object "runtime" {
        code {
            /* ---------- call routing ---------- */
            switch selector()
            case 0x2d287e43 /* insert(bytes32) */ {
                returnUint(insert(decodeAsUint(0)))
            }
            case 0xf47d33b5 /* MiMCSponge(uint256,uint256) */ {
                let xL, xR := mimcSponge(decodeAsUint(0), decodeAsUint(1))
                returnTwoUints(xL, xR)
            }
            case 0x6d9833e3 /* isKnownRoot(bytes32) */ {
                returnUint(isKnownRoot(decodeAsUint(0)))
            }
            case 0xba70f757 /* getLastRoot() */ {
                returnUint(getLastRoot())
            }
            case 0xe8295588 /* zeros(uint256) */ {
                returnUint(zeros(decodeAsUint(0)))
            }

            /* ---------- main functions ---------- */
            function insert(leaf) -> leafIndex {
                let _levels := levels()
                let _nextIndex := nextIndex()
                if eq(_nextIndex, exp(2, _levels)) {
                    revert(0, 0)
                }
                let currentIndex := _nextIndex
                let currentLevelHash := leaf
                let left := 0
                let right := 0
                for { let i := 0 } lt(i, _levels) { i := add(i, 1) } {
                    let condition := mod(currentIndex, 2)
                    if iszero(condition) {
                        left := currentLevelHash
                        right := zeros(i)
                        setFilledSubtrees(i, currentLevelHash)
                    }
                    if condition {
                        left := filledSubtrees(i)
                        right := currentLevelHash
                    }
                    if iszero(lt(left, FIELD_SIZE())) {
                        revert(0, 0)
                    }
                    if iszero(lt(right, FIELD_SIZE())) {
                        revert(0, 0)
                    }
                    let R := left
                    let C := 0
                    R, C := mimcSponge(R, C)
                    R := addmod(R, right, FIELD_SIZE())
                    R, C := mimcSponge(R, C)
                    currentLevelHash := R
                    currentIndex := div(currentIndex, 2)
                }
                let newRootIndex := addmod(currentRootIndex(), 1, ROOT_HISTORY_SIZE())
                setCurrentRootIndex(newRootIndex)
                setRoots(newRootIndex, currentLevelHash)
                setNextIndex(add(_nextIndex, 1))
                leafIndex := _nextIndex
            }

            function isKnownRoot(root) -> isKnown {
                if iszero(root) { isKnown := false }

                let _currentRootIndex := currentRootIndex()
                if eq(root, roots(_currentRootIndex)) { isKnown := true }

                for
                    { let i := sub(_currentRootIndex, 1) }
                    iszero(eq(i, _currentRootIndex))
                    { i := sub(i, 1) }
                {
                    if eq(root, roots(i)) { isKnown := 1 }
                    if iszero(i) { i := ROOT_HISTORY_SIZE() }
                }
                isKnown := false
            }

            function getLastRoot() -> v {
                v := roots(currentRootIndex())
            }

            /* ---------- constants ---------- */
            function FIELD_SIZE() -> fs { fs := 21888242871839275222246405745257275088548364400416034343698204186575808495617 }
            function ZERO_VALUE() -> zv { zv := 21663839004416932945382355908790599225266501822907911457504978515578255421292 }
            function ROOT_HISTORY_SIZE() -> rhs { rhs := 30 }

            /* ---------- calldata encoding/decoding ---------- */
            function selector() -> s {
                s := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000)
            }

            function decodeAsUint(offset) -> v {
                let pos := add(4, mul(offset, 0x20))
                if lt(calldatasize(), add(pos, 0x20)) {
                    revert(0, 0)
                }
                v := calldataload(pos)
            }

            function returnUint(v) {
                mstore(0, v)
                return(0, 0x20)
            }

            function returnTwoUints(u, v) {
                mstore(0, u)
                mstore(0x20, v)
                return(0, 0x40)
            }

            /* ---------- storage reads ---------- */
            function levels() -> v {
                v := sload(levelsPos())
            }

            function currentRootIndex() -> v {
                v := sload(currentRootIndexPos())
            }

            function nextIndex() -> v {
                v := sload(nextIndexPos())
            }

            function filledSubtrees(i) -> v {
                v := sload(filledSubtreesOffset(i))
            }

            function roots(i) -> v {
                v := sload(rootsOffset(i))
            }

            function isInitialized() -> v {
                v := sload(isInitializedPos())
            }

            /* ---------- storage writes ---------- */
            function setLevels(_levels) {
                sstore(levelsPos(), _levels)
            }

            function setCurrentRootIndex(_currentRootIndex) {
                sstore(currentRootIndexPos(), _currentRootIndex)
            }

            function setNextIndex(_nextIndex) {
                sstore(nextIndexPos(), _nextIndex)
            }

            function setFilledSubtrees(i, _filledSubtree) {
                sstore(filledSubtreesOffset(i), _filledSubtree)
            }

            function setRoots(i, _root) {
                sstore(rootsOffset(i), _root)
            }

            function setIsInitialized() {
                sstore(isInitializedPos(), 1)
            }

            /* ---------- storage layout ---------- */
            /*
                Because this is meant to be consumed as a library, we must not
                modify any of the storage slots that would normally be used as
                a result of compiling via solidity. The twister contract will be
                `delegatecall`ing into this contract, and will modify its own
                state based upon the logic here. By using the hash of the
                contract name + variable name, we prevent storage collisions.
            */
            function levelsPos() -> p {
                /* keccak256("MerkleTreeWithHistory.levels") */
                p := 0xde2ed6c39cf86ec6c46094edf836392df5606753f0bad38f3944f0d7d7378cdc
            }

            function currentRootIndexPos() -> p {
                /* keccak256("MerkleTreeWithHistory.currentRootIndex") */
                p := 0x00ff991afe2a78230bbcdd43bb1812ad7b733f0560f122e06f67cd9933d6ba9e
            }

            function nextIndexPos() -> p {
                /* keccak256("MerkleTreeWithHistory.nextIndex") */
                p := 0xd51ecf3c5a8d703fd9b1393cb4ecba6ed23884bc25601f230687eef09629a15f
            }

            function isInitializedPos() -> p {
                /* keccak256("MerkleTreeWithHistory.isInitialized") */
                p := 0x00d99680f702d11a0e37c0a04b851248ea5095ce648b7ecc393538c9b29df295
            }

            function filledSubtreesOffset(i) -> offset {
                /* keccak256(keccak256("MerkleTreeWithHistory.filledSubtrees"), i) */
                mstore(0, 0xb0c88fae7c37e544fed707550a8667cd25ee99af1d5b4f590257644dc2edfd14)
                mstore(0x20, i)
                offset := keccak256(0, 0x40)
            }

            function rootsOffset(i) -> offset {
                /* keccak256(keccak256("MerkleTreeWithHistory.roots"), i) */
                mstore(0, 0x3824de49a43784238a1838eb1c9b2f1411a38b93366828f2f9a6c422377ef870)
                mstore(0x20, i)
                offset := keccak256(0, 0x40)
            }

            /* ---------- utility functions ---------- */
            function zeros(i) -> z {
                datacopy(0, add(dataoffset("zerosInCode"), mul(i, 0x20)), 0x20)
                z := mload(0)
            }

            /*
                verbatim_Xi_Yo allows us to define an `opcode` in pure bytecode.
                In this case, I adapted the mimcsponge contract provided by
                circomlib to be a stack-based function: it takes two arguments
                from the stack, and returns two arguments to the stack. The
                original code from circomlib left a value on the stack, but this
                version is stack neutral. I compiled this code using geth.
            */
            function mimcSponge(in_xL, in_xR) -> xL, xR {
                xL, xR := verbatim_2i_2o(hex"", in_xL, in_xR)
            }
        }

        data "zerosInCode" hex"2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c20020121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c924ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb549591ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff800058459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c0071f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e301bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e50ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb10813e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b61eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db618540da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc0529d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d419be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b29671ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc345310c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c480ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce992eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354002df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f4271f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc"
    }
}
